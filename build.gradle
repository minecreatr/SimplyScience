buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

if (System.getenv('BUILD_NUMBER') != null)
    project.buildnumber = System.getenv('BUILD_NUMBER')
else
    logger.lifecycle "No build number detected, setting to 0"

version = "${minecraft_version}-${mod_version}.${buildnumber}"
group= "com.minecreatr.simplyscience"
archivesBaseName = "simplyscience"

minecraft {
    version = "1.7.10-10.13.4.1492-1.7.10"
    runDir = "eclipse"
    replace "@VERSION@", project.version
    replaceIn "Reference.java"
}

repositories {
    maven { url = "http://mobiusstrip.eu/maven" }
    maven { url = "http://chickenbones.net/maven/" }
    maven { url = "http://maven.tterrag.com" }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "mcp.mobius.waila:Waila:${waila_version}_${minecraft_version}:dev"
    compile "codechicken:CodeChickenLib:${minecraft_version}-${ccl_version}:dev"
    compile "codechicken:CodeChickenCore:${minecraft_version}-${ccc_version}:dev"
    compile "com.enderio.core:EnderCore:${endercore_version}:dev"

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
